---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: monitoring
  name: influxdb
  labels:
    app: influxdb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: influxdb
  template:
    metadata:
      labels:
        app: influxdb
    spec:
      containers:
        - name: influxdb
          image: influxdb:1.8.3
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: isp-checker-secrets-rw
          ports:
            - containerPort: 8086
          readinessProbe:
            httpGet:
              path: /ping
              port: 8086
            initialDelaySeconds: 30
            periodSeconds: 30
          livenessProbe:
            httpGet:
              path: /ping
              port: 8086
            initialDelaySeconds: 30
            periodSeconds: 30
          volumeMounts:
            - mountPath: /var/lib/influxdb
              name: var-lib-influxdb
          resources:
            requests:
              memory: "200Mi"
              cpu: "0.2"
            limits:
              memory: "300Mi"
              cpu: "0.5"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: var-lib-influxdb
          persistentVolumeClaim:
            claimName: influxdb-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: monitoring
  name: grafana
  labels:
    app: grafana
spec:
  replicas: 1
  progressDeadlineSeconds: 600
  selector:
    matchLabels:
      app: grafana
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:7.2.1
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: isp-checker-secrets-ro
          volumeMounts:
            - name: grafana-volume
              mountPath: /var/lib/grafana
            - name: grafana-datasource-provisioner
              mountPath: /etc/grafana/provisioning/datasources/
            - name: grafana-dashboard-provisioner
              mountPath: /etc/grafana/provisioning/dashboards/
            - name: grafana-dashboard
              mountPath: /tmp/config/network-dashboard.json
          ports:
            - containerPort: 3000
          env:
            - name: GF_INSTALL_PLUGINS
              value: https://grafana.com/api/plugins/gowee-traceroutemap-panel/versions/0.2.3/download;gowee-traceroutemap-panel
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 30
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 30
          resources:
            requests:
              memory: "200Mi"
              cpu: "0.25"
            limits:
              memory: "500Mi"
              cpu: "0.4"
      volumes:
        - name: grafana-volume
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-dashboard-provisioner
          configMap:
            name: network-dashboard-provisioner
        - name: grafana-dashboard
          configMap:
            name: grafana-dashboard
        - name: grafana-datasource-provisioner
          secret:
             secretName: grafana-datasource
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: monitoring
  name: telegraf
  labels:
    app: telegraf
spec:
  replicas: 1
  selector:
    matchLabels:
      app: telegraf
  template:
    metadata:
      labels:
        app: telegraf
    spec:
      containers:
        - name: telegraf
          image: tty0/isp_telegraf:1.15.3
          envFrom:
            - secretRef:
                name: isp-checker-secrets-rw
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: telegraf-config-volume
              mountPath: /etc/telegraf/
              readOnly: true
          resources:
            requests:
              memory: "100Mi"
              cpu: "0.1"
            limits:
              memory: "200Mi"
              cpu: "0.3"
      initContainers:
        - name: wait-for-influxdb
          image: curlimages/curl:7.72.0
          command: ['sh', '-c', "until curl -XGET http://influxdb-svc.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local:8086/; do echo Waiting\ for\ InfluxDB; sleep 2; done"]
      volumes:
        - name: telegraf-config-volume
          configMap:
            name: telegraf-config
